[{"/Users/baudoincoispeau/dexStarter/dex/src/index.js":"1","/Users/baudoincoispeau/dexStarter/dex/src/App.js":"2","/Users/baudoincoispeau/dexStarter/dex/src/components/Header.js":"3","/Users/baudoincoispeau/dexStarter/dex/src/components/Swap.js":"4","/Users/baudoincoispeau/dexStarter/dex/src/components/Tokens.js":"5"},{"size":353,"mtime":1692970819280,"results":"6","hashOfConfig":"7"},{"size":492,"mtime":1693307959486,"results":"8","hashOfConfig":"7"},{"size":821,"mtime":1693232364978,"results":"9","hashOfConfig":"7"},{"size":3309,"mtime":1693414452162,"results":"10","hashOfConfig":"7"},{"size":108,"mtime":1692970819280,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1uornmx",{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/baudoincoispeau/dexStarter/dex/src/index.js",[],[],"/Users/baudoincoispeau/dexStarter/dex/src/App.js",[],[],"/Users/baudoincoispeau/dexStarter/dex/src/components/Header.js",[],[],"/Users/baudoincoispeau/dexStarter/dex/src/components/Swap.js",["28"],[],"import React, { useState } from \"react\";\nimport { Input, Popover, Radio, Modal, Avatar, List } from \"antd\";\nimport {\n  ArrowDownOutlined,\n  DownOutlined,\n  SettingOutlined,\n} from \"@ant-design/icons\";\nimport tokenList from \"../tokenList.json\";\n\nfunction Swap() {\n  const [slippage, setSlippage] = useState(0.5);\n  const [tokenAmountOne, setTokenAmountOne] = useState(null);\n  const [tokenAmountTwo, setTokenAmountTwo] = useState(null);\n  const [tokenOne, setTokenOne] = useState(tokenList[1]);\n  const [tokenTwo, setTokenTwo] = useState(tokenList[5]);\n\n  const handleSlippageChange = (e) => {\n    setSlippage(e.target.value);\n  };\n\n  const changeAmount = (e) => {\n    setTokenAmountOne(e.target.value);\n  };\n\n  const switchTokens = () => {\n    let tempToken = tokenOne;\n    setTokenOne(tokenTwo);\n    setTokenTwo(tempToken);\n  };\n\n  const position = \"bottom\";\n  const align = \"center\";\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  const slippageOptions = [\n    { label: \"0.5%\", value: 0.5 },\n    { label: \"2.5%\", value: 2.5 },\n    { label: \"5.0%\", value: 5.0 },\n  ];\n\n  const settings = (\n    <>\n      <div>Slippage Tolerance</div>\n      <div>\n        <Radio.Group\n          colorText=\"white\"\n          options={slippageOptions}\n          onChange={handleSlippageChange}\n          value={slippage}\n          optionType=\"button\"\n        />\n      </div>\n    </>\n  );\n\n  return (\n    <>\n      <>\n        <Modal\n          title=\"Select a token\"\n          open={isModalOpen}\n          footer={null}\n          onCancel={() => setIsModalOpen(false)}\n        >\n          <>\n            <List\n              pagination={{ position, align }}\n              dataSource={tokenList}\n              renderItem={(token) => (\n                <List.Item>\n                  <List.Item.Meta\n                    avatar={<Avatar className=\"tokenLogo\" src={token.img} />}\n                    title={token.name}\n                    description={token.ticker}\n                  />\n                </List.Item>\n              )}\n            />\n          </>\n        </Modal>\n      </>\n      <div className=\"tradeBox\">\n        <div className=\"tradeBoxHeader\">\n          <h4>Swap</h4>\n          <Popover\n            content={settings}\n            title=\"Settings\"\n            trigger=\"click\"\n            placement=\"bottomRight\"\n          >\n            <SettingOutlined className=\"cog\" />\n          </Popover>\n        </div>\n        <div className=\"inputs\">\n          <Input\n            placeholder=\"0\"\n            value={tokenAmountOne}\n            onChange={changeAmount}\n          />\n          <Input placeholder=\"0\" value={tokenAmountTwo} disabled={true} />\n          <div className=\"switchButton\" onClick={switchTokens}>\n            <ArrowDownOutlined className=\"switchArrow\" />\n          </div>\n          <div className=\"assetOne\" onClick={() => setIsModalOpen(true)}>\n            <img src={tokenOne.img} alt=\"assetOneLogo\" className=\"assetLogo\" />\n            {tokenOne.ticker}\n            <DownOutlined />\n          </div>\n          <div className=\"assetTwo\" onClick={() => setIsModalOpen(true)}>\n            <img src={tokenTwo.img} alt=\"assetTwoLogo\" className=\"assetLogo\" />\n            {tokenTwo.ticker}\n            <DownOutlined />\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default Swap;\n","/Users/baudoincoispeau/dexStarter/dex/src/components/Tokens.js",[],[],{"ruleId":"29","severity":1,"message":"30","line":13,"column":26,"nodeType":"31","messageId":"32","endLine":13,"endColumn":43},"no-unused-vars","'setTokenAmountTwo' is assigned a value but never used.","Identifier","unusedVar"]